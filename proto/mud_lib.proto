syntax = "proto3";

package mud;

// Next id: 5
message player {
	string name = 1;
	string password_hash = 2;
	int64 id = 3;
	repeated int64 id_characters = 4;
}

// Next id: 2
message direction {
	enum direction_enum {
		NORTH = 0;
		SOUTH = 1;
		EAST = 2;
		WEST = 3;
	}
	direction_enum value = 1;
}

// Next id: 5
message attribute {
	// List of various attributes.
	enum attribute_enum {
		LIFE = 0;
		STRENGTH = 1;
		AGILITY = 2;
		INTELLIGENCE = 3;
		MELEE_POWER = 4;
		RANGE_POWER = 5;
		EXPERIENCE = 6;
	}
	attribute_enum name = 1;
	int32 score = 2;
	int32 regen = 3;
	int32 score_max = 4;
}

// Next id: 5
message item {
	string name = 1;
	string description = 2;
	int64 id = 3;
	repeated attribute attributes = 4;
}

// Next id: 10
message character {
	string name = 1;
	string description = 9;
	int64 id = 2;
	int64 tile_id = 3;
	direction facing = 4;
	repeated attribute attributes = 5;
	repeated int64 equiped_item_ids = 7;
	repeated int64 stored_item_ids = 8;
	// What is the character doing?
	enum character_state_enum {
		NONE = 0;
		WALKING = 1;
		COMBAT = 2;
	}
	character_state_enum state = 6;
}

// Next id: 8
message enemy {
	string name = 1;
	string description = 7;
	int64 id = 2;
	int64 tile_id = 3;
	direction facing = 4;
	repeated attribute attributes = 5;
	repeated int64 droppable_item_ids = 6;
}

// Next id: 3
message location {
	direction direction = 1;
	int64 id = 2;
}

// Next id: 7
message tile {
	// Is tile usable for anything?
	enum tile_type_enum {
		EMPTY = 0;
		WALL = 1;
		TREE = 2;
		PORTAL = 3;
	}
	// Who is there?
	enum resident_type_enum {
		NOBODY = 0;
		CHARACTER = 1;
		ENEMY = 2;
	}
	int64 id = 1;
	tile_type_enum type = 2;
	resident_type_enum occupant_type = 3;
	int64 occupant_id = 4;
	string mood = 5;
	repeated location neighbours = 6;
}

// Books used to store to disk.

message player_book {
	repeated player players = 1;
}

message tile_book {
	repeated tile tiles = 1;
}

message character_book {
	repeated character characters = 1;
}

message enemy_book {
	repeated enemy enemies = 1;
}

message item_book {
	repeated item items = 1;
}

// Message that we use for gRPC.

// Next id: 2
message token_in {}

// Next id: 2
message token_out {
	int64 token = 1;
}

// Next id: 4
message login_in {
	string name = 1;
	string password_hash = 2;
	int64 token = 3;
}

// Next id: 3
message login_out {
	enum status_enum {
		FAILURE = 0;
		UNKNOWN_TOKEN = 1;
		TOO_OLD_TOKEN = 2;
		ALREADY_CONNECTED = 3;
		SUCCESS = 4;
	}
	status_enum status = 1;
	repeated character characters = 2;
}

// gRPC description.
service game_server {
	rpc GetToken(token_in) returns (token_out) {}
	rpc Login(login_in) returns (login_out) {}
}
