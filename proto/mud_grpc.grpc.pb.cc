// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mud_grpc.proto

#include "mud_grpc.pb.h"
#include "mud_grpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mud {

static const char* game_server_method_names[] = {
  "/mud.game_server/GetToken",
  "/mud.game_server/Login",
  "/mud.game_server/SelectCharacter",
  "/mud.game_server/CreateCharacter",
  "/mud.game_server/Play",
};

std::unique_ptr< game_server::Stub> game_server::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< game_server::Stub> stub(new game_server::Stub(channel));
  return stub;
}

game_server::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetToken_(game_server_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(game_server_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectCharacter_(game_server_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCharacter_(game_server_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Play_(game_server_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status game_server::Stub::GetToken(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::mud::get_token_out* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetToken_, context, request, response);
}

void game_server::Stub::experimental_async::GetToken(::grpc::ClientContext* context, const ::mud::get_token_in* request, ::mud::get_token_out* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetToken_, context, request, response, std::move(f));
}

void game_server::Stub::experimental_async::GetToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::get_token_out* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetToken_, context, request, response, std::move(f));
}

void game_server::Stub::experimental_async::GetToken(::grpc::ClientContext* context, const ::mud::get_token_in* request, ::mud::get_token_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetToken_, context, request, response, reactor);
}

void game_server::Stub::experimental_async::GetToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::get_token_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mud::get_token_out>* game_server::Stub::AsyncGetTokenRaw(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mud::get_token_out>::Create(channel_.get(), cq, rpcmethod_GetToken_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mud::get_token_out>* game_server::Stub::PrepareAsyncGetTokenRaw(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mud::get_token_out>::Create(channel_.get(), cq, rpcmethod_GetToken_, context, request, false);
}

::grpc::Status game_server::Stub::Login(::grpc::ClientContext* context, const ::mud::login_in& request, ::mud::login_out* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void game_server::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::mud::login_in* request, ::mud::login_out* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void game_server::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::login_out* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void game_server::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::mud::login_in* request, ::mud::login_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

void game_server::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::login_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mud::login_out>* game_server::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mud::login_out>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mud::login_out>* game_server::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mud::login_out>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status game_server::Stub::SelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::mud::select_character_out* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SelectCharacter_, context, request, response);
}

void game_server::Stub::experimental_async::SelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in* request, ::mud::select_character_out* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SelectCharacter_, context, request, response, std::move(f));
}

void game_server::Stub::experimental_async::SelectCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::select_character_out* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SelectCharacter_, context, request, response, std::move(f));
}

void game_server::Stub::experimental_async::SelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in* request, ::mud::select_character_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SelectCharacter_, context, request, response, reactor);
}

void game_server::Stub::experimental_async::SelectCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::select_character_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SelectCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mud::select_character_out>* game_server::Stub::AsyncSelectCharacterRaw(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mud::select_character_out>::Create(channel_.get(), cq, rpcmethod_SelectCharacter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mud::select_character_out>* game_server::Stub::PrepareAsyncSelectCharacterRaw(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mud::select_character_out>::Create(channel_.get(), cq, rpcmethod_SelectCharacter_, context, request, false);
}

::grpc::Status game_server::Stub::CreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::mud::create_character_out* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCharacter_, context, request, response);
}

void game_server::Stub::experimental_async::CreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in* request, ::mud::create_character_out* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCharacter_, context, request, response, std::move(f));
}

void game_server::Stub::experimental_async::CreateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::create_character_out* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCharacter_, context, request, response, std::move(f));
}

void game_server::Stub::experimental_async::CreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in* request, ::mud::create_character_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCharacter_, context, request, response, reactor);
}

void game_server::Stub::experimental_async::CreateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::create_character_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mud::create_character_out>* game_server::Stub::AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mud::create_character_out>::Create(channel_.get(), cq, rpcmethod_CreateCharacter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mud::create_character_out>* game_server::Stub::PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mud::create_character_out>::Create(channel_.get(), cq, rpcmethod_CreateCharacter_, context, request, false);
}

::grpc::Status game_server::Stub::Play(::grpc::ClientContext* context, const ::mud::play_in& request, ::mud::play_out* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Play_, context, request, response);
}

void game_server::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::mud::play_in* request, ::mud::play_out* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, std::move(f));
}

void game_server::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::play_out* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, std::move(f));
}

void game_server::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::mud::play_in* request, ::mud::play_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, reactor);
}

void game_server::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::play_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mud::play_out>* game_server::Stub::AsyncPlayRaw(::grpc::ClientContext* context, const ::mud::play_in& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mud::play_out>::Create(channel_.get(), cq, rpcmethod_Play_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mud::play_out>* game_server::Stub::PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::mud::play_in& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mud::play_out>::Create(channel_.get(), cq, rpcmethod_Play_, context, request, false);
}

game_server::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      game_server_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< game_server::Service, ::mud::get_token_in, ::mud::get_token_out>(
          std::mem_fn(&game_server::Service::GetToken), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      game_server_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< game_server::Service, ::mud::login_in, ::mud::login_out>(
          std::mem_fn(&game_server::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      game_server_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< game_server::Service, ::mud::select_character_in, ::mud::select_character_out>(
          std::mem_fn(&game_server::Service::SelectCharacter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      game_server_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< game_server::Service, ::mud::create_character_in, ::mud::create_character_out>(
          std::mem_fn(&game_server::Service::CreateCharacter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      game_server_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< game_server::Service, ::mud::play_in, ::mud::play_out>(
          std::mem_fn(&game_server::Service::Play), this)));
}

game_server::Service::~Service() {
}

::grpc::Status game_server::Service::GetToken(::grpc::ServerContext* context, const ::mud::get_token_in* request, ::mud::get_token_out* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status game_server::Service::Login(::grpc::ServerContext* context, const ::mud::login_in* request, ::mud::login_out* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status game_server::Service::SelectCharacter(::grpc::ServerContext* context, const ::mud::select_character_in* request, ::mud::select_character_out* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status game_server::Service::CreateCharacter(::grpc::ServerContext* context, const ::mud::create_character_in* request, ::mud::create_character_out* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status game_server::Service::Play(::grpc::ServerContext* context, const ::mud::play_in* request, ::mud::play_out* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mud

