// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mud_grpc.proto
#ifndef GRPC_mud_5fgrpc_2eproto__INCLUDED
#define GRPC_mud_5fgrpc_2eproto__INCLUDED

#include "mud_grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace mud {

// gRPC description.
class game_server final {
 public:
  static constexpr char const* service_full_name() {
    return "mud.game_server";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetToken(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::mud::get_token_out* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::get_token_out>> AsyncGetToken(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::get_token_out>>(AsyncGetTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::get_token_out>> PrepareAsyncGetToken(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::get_token_out>>(PrepareAsyncGetTokenRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::mud::login_in& request, ::mud::login_out* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::login_out>> AsyncLogin(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::login_out>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::login_out>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::login_out>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status SelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::mud::select_character_out* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::select_character_out>> AsyncSelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::select_character_out>>(AsyncSelectCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::select_character_out>> PrepareAsyncSelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::select_character_out>>(PrepareAsyncSelectCharacterRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::mud::create_character_out* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::create_character_out>> AsyncCreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::create_character_out>>(AsyncCreateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::create_character_out>> PrepareAsyncCreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::create_character_out>>(PrepareAsyncCreateCharacterRaw(context, request, cq));
    }
    virtual ::grpc::Status Play(::grpc::ClientContext* context, const ::mud::play_in& request, ::mud::play_out* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::play_out>> AsyncPlay(::grpc::ClientContext* context, const ::mud::play_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::play_out>>(AsyncPlayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::play_out>> PrepareAsyncPlay(::grpc::ClientContext* context, const ::mud::play_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::play_out>>(PrepareAsyncPlayRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetToken(::grpc::ClientContext* context, const ::mud::get_token_in* request, ::mud::get_token_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::get_token_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetToken(::grpc::ClientContext* context, const ::mud::get_token_in* request, ::mud::get_token_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::get_token_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::mud::login_in* request, ::mud::login_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::login_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::mud::login_in* request, ::mud::login_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::login_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in* request, ::mud::select_character_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SelectCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::select_character_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in* request, ::mud::select_character_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SelectCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::select_character_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in* request, ::mud::create_character_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::create_character_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in* request, ::mud::create_character_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::create_character_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Play(::grpc::ClientContext* context, const ::mud::play_in* request, ::mud::play_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::play_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Play(::grpc::ClientContext* context, const ::mud::play_in* request, ::mud::play_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::play_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::get_token_out>* AsyncGetTokenRaw(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::get_token_out>* PrepareAsyncGetTokenRaw(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::login_out>* AsyncLoginRaw(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::login_out>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::select_character_out>* AsyncSelectCharacterRaw(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::select_character_out>* PrepareAsyncSelectCharacterRaw(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::create_character_out>* AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::create_character_out>* PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::play_out>* AsyncPlayRaw(::grpc::ClientContext* context, const ::mud::play_in& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::play_out>* PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::mud::play_in& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetToken(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::mud::get_token_out* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::get_token_out>> AsyncGetToken(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::get_token_out>>(AsyncGetTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::get_token_out>> PrepareAsyncGetToken(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::get_token_out>>(PrepareAsyncGetTokenRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::mud::login_in& request, ::mud::login_out* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::login_out>> AsyncLogin(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::login_out>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::login_out>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::login_out>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status SelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::mud::select_character_out* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::select_character_out>> AsyncSelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::select_character_out>>(AsyncSelectCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::select_character_out>> PrepareAsyncSelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::select_character_out>>(PrepareAsyncSelectCharacterRaw(context, request, cq));
    }
    ::grpc::Status CreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::mud::create_character_out* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::create_character_out>> AsyncCreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::create_character_out>>(AsyncCreateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::create_character_out>> PrepareAsyncCreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::create_character_out>>(PrepareAsyncCreateCharacterRaw(context, request, cq));
    }
    ::grpc::Status Play(::grpc::ClientContext* context, const ::mud::play_in& request, ::mud::play_out* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::play_out>> AsyncPlay(::grpc::ClientContext* context, const ::mud::play_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::play_out>>(AsyncPlayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::play_out>> PrepareAsyncPlay(::grpc::ClientContext* context, const ::mud::play_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::play_out>>(PrepareAsyncPlayRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetToken(::grpc::ClientContext* context, const ::mud::get_token_in* request, ::mud::get_token_out* response, std::function<void(::grpc::Status)>) override;
      void GetToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::get_token_out* response, std::function<void(::grpc::Status)>) override;
      void GetToken(::grpc::ClientContext* context, const ::mud::get_token_in* request, ::mud::get_token_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::get_token_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::mud::login_in* request, ::mud::login_out* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::login_out* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::mud::login_in* request, ::mud::login_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::login_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in* request, ::mud::select_character_out* response, std::function<void(::grpc::Status)>) override;
      void SelectCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::select_character_out* response, std::function<void(::grpc::Status)>) override;
      void SelectCharacter(::grpc::ClientContext* context, const ::mud::select_character_in* request, ::mud::select_character_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SelectCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::select_character_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in* request, ::mud::create_character_out* response, std::function<void(::grpc::Status)>) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::create_character_out* response, std::function<void(::grpc::Status)>) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::mud::create_character_in* request, ::mud::create_character_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::create_character_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Play(::grpc::ClientContext* context, const ::mud::play_in* request, ::mud::play_out* response, std::function<void(::grpc::Status)>) override;
      void Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::play_out* response, std::function<void(::grpc::Status)>) override;
      void Play(::grpc::ClientContext* context, const ::mud::play_in* request, ::mud::play_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::play_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mud::get_token_out>* AsyncGetTokenRaw(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mud::get_token_out>* PrepareAsyncGetTokenRaw(::grpc::ClientContext* context, const ::mud::get_token_in& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mud::login_out>* AsyncLoginRaw(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mud::login_out>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mud::select_character_out>* AsyncSelectCharacterRaw(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mud::select_character_out>* PrepareAsyncSelectCharacterRaw(::grpc::ClientContext* context, const ::mud::select_character_in& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mud::create_character_out>* AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mud::create_character_out>* PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::mud::create_character_in& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mud::play_out>* AsyncPlayRaw(::grpc::ClientContext* context, const ::mud::play_in& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mud::play_out>* PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::mud::play_in& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetToken_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_SelectCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_Play_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetToken(::grpc::ServerContext* context, const ::mud::get_token_in* request, ::mud::get_token_out* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::mud::login_in* request, ::mud::login_out* response);
    virtual ::grpc::Status SelectCharacter(::grpc::ServerContext* context, const ::mud::select_character_in* request, ::mud::select_character_out* response);
    virtual ::grpc::Status CreateCharacter(::grpc::ServerContext* context, const ::mud::create_character_in* request, ::mud::create_character_out* response);
    virtual ::grpc::Status Play(::grpc::ServerContext* context, const ::mud::play_in* request, ::mud::play_out* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetToken() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::mud::get_token_in* /*request*/, ::mud::get_token_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetToken(::grpc::ServerContext* context, ::mud::get_token_in* request, ::grpc::ServerAsyncResponseWriter< ::mud::get_token_out>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::mud::login_in* request, ::grpc::ServerAsyncResponseWriter< ::mud::login_out>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SelectCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SelectCharacter() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SelectCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectCharacter(::grpc::ServerContext* /*context*/, const ::mud::select_character_in* /*request*/, ::mud::select_character_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectCharacter(::grpc::ServerContext* context, ::mud::select_character_in* request, ::grpc::ServerAsyncResponseWriter< ::mud::select_character_out>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::mud::create_character_in* /*request*/, ::mud::create_character_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharacter(::grpc::ServerContext* context, ::mud::create_character_in* request, ::grpc::ServerAsyncResponseWriter< ::mud::create_character_out>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Play() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* /*context*/, const ::mud::play_in* /*request*/, ::mud::play_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlay(::grpc::ServerContext* context, ::mud::play_in* request, ::grpc::ServerAsyncResponseWriter< ::mud::play_out>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetToken<WithAsyncMethod_Login<WithAsyncMethod_SelectCharacter<WithAsyncMethod_CreateCharacter<WithAsyncMethod_Play<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetToken() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mud::get_token_in, ::mud::get_token_out>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::mud::get_token_in* request, ::mud::get_token_out* response) { return this->GetToken(context, request, response); }));}
    void SetMessageAllocatorFor_GetToken(
        ::grpc::experimental::MessageAllocator< ::mud::get_token_in, ::mud::get_token_out>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mud::get_token_in, ::mud::get_token_out>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::mud::get_token_in* /*request*/, ::mud::get_token_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetToken(::grpc::experimental::CallbackServerContext* /*context*/, const ::mud::get_token_in* /*request*/, ::mud::get_token_out* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Login() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mud::login_in, ::mud::login_out>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::mud::login_in* request, ::mud::login_out* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::experimental::MessageAllocator< ::mud::login_in, ::mud::login_out>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mud::login_in, ::mud::login_out>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* Login(::grpc::experimental::CallbackServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SelectCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SelectCharacter() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mud::select_character_in, ::mud::select_character_out>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::mud::select_character_in* request, ::mud::select_character_out* response) { return this->SelectCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_SelectCharacter(
        ::grpc::experimental::MessageAllocator< ::mud::select_character_in, ::mud::select_character_out>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mud::select_character_in, ::mud::select_character_out>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SelectCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectCharacter(::grpc::ServerContext* /*context*/, const ::mud::select_character_in* /*request*/, ::mud::select_character_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* SelectCharacter(::grpc::experimental::CallbackServerContext* /*context*/, const ::mud::select_character_in* /*request*/, ::mud::select_character_out* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateCharacter() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mud::create_character_in, ::mud::create_character_out>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::mud::create_character_in* request, ::mud::create_character_out* response) { return this->CreateCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCharacter(
        ::grpc::experimental::MessageAllocator< ::mud::create_character_in, ::mud::create_character_out>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mud::create_character_in, ::mud::create_character_out>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::mud::create_character_in* /*request*/, ::mud::create_character_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* CreateCharacter(::grpc::experimental::CallbackServerContext* /*context*/, const ::mud::create_character_in* /*request*/, ::mud::create_character_out* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Play() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mud::play_in, ::mud::play_out>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::mud::play_in* request, ::mud::play_out* response) { return this->Play(context, request, response); }));}
    void SetMessageAllocatorFor_Play(
        ::grpc::experimental::MessageAllocator< ::mud::play_in, ::mud::play_out>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mud::play_in, ::mud::play_out>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* /*context*/, const ::mud::play_in* /*request*/, ::mud::play_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* Play(::grpc::experimental::CallbackServerContext* /*context*/, const ::mud::play_in* /*request*/, ::mud::play_out* /*response*/) { return nullptr; }
  };
  typedef ExperimentalWithCallbackMethod_GetToken<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_SelectCharacter<ExperimentalWithCallbackMethod_CreateCharacter<ExperimentalWithCallbackMethod_Play<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetToken() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::mud::get_token_in* /*request*/, ::mud::get_token_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SelectCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SelectCharacter() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SelectCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectCharacter(::grpc::ServerContext* /*context*/, const ::mud::select_character_in* /*request*/, ::mud::select_character_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::mud::create_character_in* /*request*/, ::mud::create_character_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Play() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* /*context*/, const ::mud::play_in* /*request*/, ::mud::play_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetToken() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::mud::get_token_in* /*request*/, ::mud::get_token_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SelectCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SelectCharacter() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SelectCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectCharacter(::grpc::ServerContext* /*context*/, const ::mud::select_character_in* /*request*/, ::mud::select_character_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::mud::create_character_in* /*request*/, ::mud::create_character_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Play() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* /*context*/, const ::mud::play_in* /*request*/, ::mud::play_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetToken() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetToken(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::mud::get_token_in* /*request*/, ::mud::get_token_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetToken(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Login() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* Login(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SelectCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SelectCharacter() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SelectCharacter(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SelectCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectCharacter(::grpc::ServerContext* /*context*/, const ::mud::select_character_in* /*request*/, ::mud::select_character_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* SelectCharacter(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateCharacter() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCharacter(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::mud::create_character_in* /*request*/, ::mud::create_character_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* CreateCharacter(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Play() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Play(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* /*context*/, const ::mud::play_in* /*request*/, ::mud::play_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* Play(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetToken() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mud::get_token_in, ::mud::get_token_out>(std::bind(&WithStreamedUnaryMethod_GetToken<BaseClass>::StreamedGetToken, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::mud::get_token_in* /*request*/, ::mud::get_token_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mud::get_token_in,::mud::get_token_out>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mud::login_in, ::mud::login_out>(std::bind(&WithStreamedUnaryMethod_Login<BaseClass>::StreamedLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mud::login_in,::mud::login_out>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SelectCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SelectCharacter() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mud::select_character_in, ::mud::select_character_out>(std::bind(&WithStreamedUnaryMethod_SelectCharacter<BaseClass>::StreamedSelectCharacter, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SelectCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SelectCharacter(::grpc::ServerContext* /*context*/, const ::mud::select_character_in* /*request*/, ::mud::select_character_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSelectCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mud::select_character_in,::mud::select_character_out>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mud::create_character_in, ::mud::create_character_out>(std::bind(&WithStreamedUnaryMethod_CreateCharacter<BaseClass>::StreamedCreateCharacter, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::mud::create_character_in* /*request*/, ::mud::create_character_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mud::create_character_in,::mud::create_character_out>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Play() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::mud::play_in, ::mud::play_out>(std::bind(&WithStreamedUnaryMethod_Play<BaseClass>::StreamedPlay, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Play(::grpc::ServerContext* /*context*/, const ::mud::play_in* /*request*/, ::mud::play_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mud::play_in,::mud::play_out>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetToken<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_SelectCharacter<WithStreamedUnaryMethod_CreateCharacter<WithStreamedUnaryMethod_Play<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetToken<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_SelectCharacter<WithStreamedUnaryMethod_CreateCharacter<WithStreamedUnaryMethod_Play<Service > > > > > StreamedService;
};

}  // namespace mud


#endif  // GRPC_mud_5fgrpc_2eproto__INCLUDED
