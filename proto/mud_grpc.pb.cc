// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mud_grpc.proto

#include "mud_grpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mud_5flib_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_character_mud_5flib_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mud_5flib_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_enemy_mud_5flib_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mud_5flib_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_item_mud_5flib_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mud_5flib_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tile_mud_5flib_2eproto;
namespace mud {
class get_token_inDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_token_in> _instance;
} _get_token_in_default_instance_;
class get_token_outDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_token_out> _instance;
} _get_token_out_default_instance_;
class login_inDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<login_in> _instance;
} _login_in_default_instance_;
class login_outDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<login_out> _instance;
} _login_out_default_instance_;
class select_character_inDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<select_character_in> _instance;
} _select_character_in_default_instance_;
class select_character_outDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<select_character_out> _instance;
} _select_character_out_default_instance_;
class create_character_inDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<create_character_in> _instance;
} _create_character_in_default_instance_;
class create_character_outDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<create_character_out> _instance;
} _create_character_out_default_instance_;
class play_inDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<play_in> _instance;
} _play_in_default_instance_;
class play_outDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<play_out> _instance;
} _play_out_default_instance_;
}  // namespace mud
static void InitDefaultsscc_info_create_character_in_mud_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_create_character_in_default_instance_;
    new (ptr) ::mud::create_character_in();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::create_character_in::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_create_character_in_mud_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_create_character_in_mud_5fgrpc_2eproto}, {}};

static void InitDefaultsscc_info_create_character_out_mud_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_create_character_out_default_instance_;
    new (ptr) ::mud::create_character_out();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::create_character_out::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_create_character_out_mud_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_create_character_out_mud_5fgrpc_2eproto}, {
      &scc_info_character_mud_5flib_2eproto.base,}};

static void InitDefaultsscc_info_get_token_in_mud_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_get_token_in_default_instance_;
    new (ptr) ::mud::get_token_in();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::get_token_in::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_token_in_mud_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_token_in_mud_5fgrpc_2eproto}, {}};

static void InitDefaultsscc_info_get_token_out_mud_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_get_token_out_default_instance_;
    new (ptr) ::mud::get_token_out();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::get_token_out::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_token_out_mud_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_token_out_mud_5fgrpc_2eproto}, {}};

static void InitDefaultsscc_info_login_in_mud_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_login_in_default_instance_;
    new (ptr) ::mud::login_in();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::login_in::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_login_in_mud_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_login_in_mud_5fgrpc_2eproto}, {}};

static void InitDefaultsscc_info_login_out_mud_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_login_out_default_instance_;
    new (ptr) ::mud::login_out();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::login_out::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_login_out_mud_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_login_out_mud_5fgrpc_2eproto}, {
      &scc_info_character_mud_5flib_2eproto.base,}};

static void InitDefaultsscc_info_play_in_mud_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_play_in_default_instance_;
    new (ptr) ::mud::play_in();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::play_in::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_play_in_mud_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_play_in_mud_5fgrpc_2eproto}, {}};

static void InitDefaultsscc_info_play_out_mud_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_play_out_default_instance_;
    new (ptr) ::mud::play_out();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::play_out::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_play_out_mud_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_play_out_mud_5fgrpc_2eproto}, {
      &scc_info_tile_mud_5flib_2eproto.base,
      &scc_info_character_mud_5flib_2eproto.base,
      &scc_info_enemy_mud_5flib_2eproto.base,
      &scc_info_item_mud_5flib_2eproto.base,}};

static void InitDefaultsscc_info_select_character_in_mud_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_select_character_in_default_instance_;
    new (ptr) ::mud::select_character_in();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::select_character_in::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_select_character_in_mud_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_select_character_in_mud_5fgrpc_2eproto}, {}};

static void InitDefaultsscc_info_select_character_out_mud_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_select_character_out_default_instance_;
    new (ptr) ::mud::select_character_out();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::select_character_out::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_select_character_out_mud_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_select_character_out_mud_5fgrpc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mud_5fgrpc_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mud_5fgrpc_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mud_5fgrpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mud_5fgrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::get_token_in, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::get_token_out, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::get_token_out, id_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::login_in, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::login_in, name_),
  PROTOBUF_FIELD_OFFSET(::mud::login_in, password_hash_),
  PROTOBUF_FIELD_OFFSET(::mud::login_in, id_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::login_out, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::login_out, status_),
  PROTOBUF_FIELD_OFFSET(::mud::login_out, id_player_),
  PROTOBUF_FIELD_OFFSET(::mud::login_out, characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::select_character_in, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::select_character_in, id_character_),
  PROTOBUF_FIELD_OFFSET(::mud::select_character_in, id_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::select_character_out, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::select_character_out, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::create_character_in, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::create_character_in, name_),
  PROTOBUF_FIELD_OFFSET(::mud::create_character_in, description_),
  PROTOBUF_FIELD_OFFSET(::mud::create_character_in, id_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::create_character_out, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::create_character_out, status_),
  PROTOBUF_FIELD_OFFSET(::mud::create_character_out, id_character_),
  PROTOBUF_FIELD_OFFSET(::mud::create_character_out, characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::play_in, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::play_in, id_token_),
  PROTOBUF_FIELD_OFFSET(::mud::play_in, id_player_),
  PROTOBUF_FIELD_OFFSET(::mud::play_in, id_character_),
  PROTOBUF_FIELD_OFFSET(::mud::play_in, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::play_out, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::play_out, id_character_),
  PROTOBUF_FIELD_OFFSET(::mud::play_out, status_),
  PROTOBUF_FIELD_OFFSET(::mud::play_out, tiles_),
  PROTOBUF_FIELD_OFFSET(::mud::play_out, characters_),
  PROTOBUF_FIELD_OFFSET(::mud::play_out, enemies_),
  PROTOBUF_FIELD_OFFSET(::mud::play_out, items_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mud::get_token_in)},
  { 5, -1, sizeof(::mud::get_token_out)},
  { 11, -1, sizeof(::mud::login_in)},
  { 19, -1, sizeof(::mud::login_out)},
  { 27, -1, sizeof(::mud::select_character_in)},
  { 34, -1, sizeof(::mud::select_character_out)},
  { 40, -1, sizeof(::mud::create_character_in)},
  { 48, -1, sizeof(::mud::create_character_out)},
  { 56, -1, sizeof(::mud::play_in)},
  { 65, -1, sizeof(::mud::play_out)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_get_token_in_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_get_token_out_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_login_in_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_login_out_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_select_character_in_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_select_character_out_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_create_character_in_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_create_character_out_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_play_in_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_play_out_default_instance_),
};

const char descriptor_table_protodef_mud_5fgrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016mud_grpc.proto\022\003mud\032\rmud_lib.proto\"\016\n\014"
  "get_token_in\"!\n\rget_token_out\022\020\n\010id_toke"
  "n\030\001 \001(\003\"A\n\010login_in\022\014\n\004name\030\001 \001(\t\022\025\n\rpas"
  "sword_hash\030\002 \001(\t\022\020\n\010id_token\030\003 \001(\003\"\324\001\n\tl"
  "ogin_out\022*\n\006status\030\001 \001(\0162\032.mud.login_out"
  ".status_enum\022\021\n\tid_player\030\003 \001(\003\022\"\n\nchara"
  "cters\030\002 \003(\0132\016.mud.character\"d\n\013status_en"
  "um\022\013\n\007FAILURE\020\000\022\021\n\rUNKNOWN_TOKEN\020\001\022\021\n\rTO"
  "O_OLD_TOKEN\020\002\022\025\n\021ALREADY_CONNECTED\020\003\022\013\n\007"
  "SUCCESS\020\004\"=\n\023select_character_in\022\024\n\014id_c"
  "haracter\030\001 \001(\003\022\020\n\010id_token\030\002 \001(\003\"\205\001\n\024sel"
  "ect_character_out\0225\n\006status\030\001 \001(\0162%.mud."
  "select_character_out.status_enum\"6\n\013stat"
  "us_enum\022\013\n\007FAILURE\020\000\022\r\n\tFORBIDDEN\020\001\022\013\n\007S"
  "UCCESS\020\002\"J\n\023create_character_in\022\014\n\004name\030"
  "\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\020\n\010id_token\030\003"
  " \001(\003\"\300\001\n\024create_character_out\0225\n\006status\030"
  "\001 \001(\0162%.mud.create_character_out.status_"
  "enum\022\024\n\014id_character\030\002 \001(\003\022\"\n\ncharacters"
  "\030\003 \003(\0132\016.mud.character\"7\n\013status_enum\022\013\n"
  "\007FAILURE\020\000\022\016\n\nALREADY_IN\020\001\022\013\n\007SUCCESS\020\002\""
  "\231\002\n\007play_in\022\020\n\010id_token\030\001 \001(\003\022\021\n\tid_play"
  "er\030\002 \001(\003\022\024\n\014id_character\030\003 \001(\003\022*\n\007comman"
  "d\030\004 \001(\0162\031.mud.play_in.command_enum\"\246\001\n\014c"
  "ommand_enum\022\016\n\nNO_COMMAND\020\000\022\r\n\tTURN_LEFT"
  "\020\001\022\016\n\nTURN_RIGHT\020\002\022\013\n\007FORWARD\020\003\022\014\n\010BACKW"
  "ARD\020\004\022\020\n\014ATTACK_MELEE\020\005\022\020\n\014ATTACK_RANGE\020"
  "\006\022\n\n\006DEFEND\020\007\022\010\n\004HEAL\020\010\022\010\n\004INFO\020\t\022\010\n\004QUI"
  "T\020\n\"\375\001\n\010play_out\022\024\n\014id_character\030\001 \001(\003\022)"
  "\n\006status\030\002 \001(\0162\031.mud.play_out.status_enu"
  "m\022\030\n\005tiles\030\003 \003(\0132\t.mud.tile\022\"\n\ncharacter"
  "s\030\004 \003(\0132\016.mud.character\022\033\n\007enemies\030\005 \003(\013"
  "2\n.mud.enemy\022\030\n\005items\030\006 \003(\0132\t.mud.item\";"
  "\n\013status_enum\022\013\n\007FAILURE\020\000\022\013\n\007SUCCESS\020\001\022"
  "\010\n\004QUIT\020\002\022\010\n\004DEAD\020\0032\247\002\n\013game_server\0223\n\010G"
  "etToken\022\021.mud.get_token_in\032\022.mud.get_tok"
  "en_out\"\000\022(\n\005Login\022\r.mud.login_in\032\016.mud.l"
  "ogin_out\"\000\022H\n\017SelectCharacter\022\030.mud.sele"
  "ct_character_in\032\031.mud.select_character_o"
  "ut\"\000\022H\n\017CreateCharacter\022\030.mud.create_cha"
  "racter_in\032\031.mud.create_character_out\"\000\022%"
  "\n\004Play\022\014.mud.play_in\032\r.mud.play_out\"\000b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mud_5fgrpc_2eproto_deps[1] = {
  &::descriptor_table_mud_5flib_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mud_5fgrpc_2eproto_sccs[10] = {
  &scc_info_create_character_in_mud_5fgrpc_2eproto.base,
  &scc_info_create_character_out_mud_5fgrpc_2eproto.base,
  &scc_info_get_token_in_mud_5fgrpc_2eproto.base,
  &scc_info_get_token_out_mud_5fgrpc_2eproto.base,
  &scc_info_login_in_mud_5fgrpc_2eproto.base,
  &scc_info_login_out_mud_5fgrpc_2eproto.base,
  &scc_info_play_in_mud_5fgrpc_2eproto.base,
  &scc_info_play_out_mud_5fgrpc_2eproto.base,
  &scc_info_select_character_in_mud_5fgrpc_2eproto.base,
  &scc_info_select_character_out_mud_5fgrpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mud_5fgrpc_2eproto_once;
static bool descriptor_table_mud_5fgrpc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mud_5fgrpc_2eproto = {
  &descriptor_table_mud_5fgrpc_2eproto_initialized, descriptor_table_protodef_mud_5fgrpc_2eproto, "mud_grpc.proto", 1685,
  &descriptor_table_mud_5fgrpc_2eproto_once, descriptor_table_mud_5fgrpc_2eproto_sccs, descriptor_table_mud_5fgrpc_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_mud_5fgrpc_2eproto::offsets,
  file_level_metadata_mud_5fgrpc_2eproto, 10, file_level_enum_descriptors_mud_5fgrpc_2eproto, file_level_service_descriptors_mud_5fgrpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mud_5fgrpc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mud_5fgrpc_2eproto), true);
namespace mud {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* login_out_status_enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mud_5fgrpc_2eproto);
  return file_level_enum_descriptors_mud_5fgrpc_2eproto[0];
}
bool login_out_status_enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr login_out_status_enum login_out::FAILURE;
constexpr login_out_status_enum login_out::UNKNOWN_TOKEN;
constexpr login_out_status_enum login_out::TOO_OLD_TOKEN;
constexpr login_out_status_enum login_out::ALREADY_CONNECTED;
constexpr login_out_status_enum login_out::SUCCESS;
constexpr login_out_status_enum login_out::status_enum_MIN;
constexpr login_out_status_enum login_out::status_enum_MAX;
constexpr int login_out::status_enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* select_character_out_status_enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mud_5fgrpc_2eproto);
  return file_level_enum_descriptors_mud_5fgrpc_2eproto[1];
}
bool select_character_out_status_enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr select_character_out_status_enum select_character_out::FAILURE;
constexpr select_character_out_status_enum select_character_out::FORBIDDEN;
constexpr select_character_out_status_enum select_character_out::SUCCESS;
constexpr select_character_out_status_enum select_character_out::status_enum_MIN;
constexpr select_character_out_status_enum select_character_out::status_enum_MAX;
constexpr int select_character_out::status_enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* create_character_out_status_enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mud_5fgrpc_2eproto);
  return file_level_enum_descriptors_mud_5fgrpc_2eproto[2];
}
bool create_character_out_status_enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr create_character_out_status_enum create_character_out::FAILURE;
constexpr create_character_out_status_enum create_character_out::ALREADY_IN;
constexpr create_character_out_status_enum create_character_out::SUCCESS;
constexpr create_character_out_status_enum create_character_out::status_enum_MIN;
constexpr create_character_out_status_enum create_character_out::status_enum_MAX;
constexpr int create_character_out::status_enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* play_in_command_enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mud_5fgrpc_2eproto);
  return file_level_enum_descriptors_mud_5fgrpc_2eproto[3];
}
bool play_in_command_enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr play_in_command_enum play_in::NO_COMMAND;
constexpr play_in_command_enum play_in::TURN_LEFT;
constexpr play_in_command_enum play_in::TURN_RIGHT;
constexpr play_in_command_enum play_in::FORWARD;
constexpr play_in_command_enum play_in::BACKWARD;
constexpr play_in_command_enum play_in::ATTACK_MELEE;
constexpr play_in_command_enum play_in::ATTACK_RANGE;
constexpr play_in_command_enum play_in::DEFEND;
constexpr play_in_command_enum play_in::HEAL;
constexpr play_in_command_enum play_in::INFO;
constexpr play_in_command_enum play_in::QUIT;
constexpr play_in_command_enum play_in::command_enum_MIN;
constexpr play_in_command_enum play_in::command_enum_MAX;
constexpr int play_in::command_enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* play_out_status_enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mud_5fgrpc_2eproto);
  return file_level_enum_descriptors_mud_5fgrpc_2eproto[4];
}
bool play_out_status_enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr play_out_status_enum play_out::FAILURE;
constexpr play_out_status_enum play_out::SUCCESS;
constexpr play_out_status_enum play_out::QUIT;
constexpr play_out_status_enum play_out::DEAD;
constexpr play_out_status_enum play_out::status_enum_MIN;
constexpr play_out_status_enum play_out::status_enum_MAX;
constexpr int play_out::status_enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void get_token_in::InitAsDefaultInstance() {
}
class get_token_in::_Internal {
 public:
};

get_token_in::get_token_in()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.get_token_in)
}
get_token_in::get_token_in(const get_token_in& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mud.get_token_in)
}

void get_token_in::SharedCtor() {
}

get_token_in::~get_token_in() {
  // @@protoc_insertion_point(destructor:mud.get_token_in)
  SharedDtor();
}

void get_token_in::SharedDtor() {
}

void get_token_in::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_token_in& get_token_in::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_token_in_mud_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void get_token_in::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.get_token_in)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* get_token_in::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_token_in::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.get_token_in)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.get_token_in)
  return target;
}

size_t get_token_in::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.get_token_in)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_token_in::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.get_token_in)
  GOOGLE_DCHECK_NE(&from, this);
  const get_token_in* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_token_in>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.get_token_in)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.get_token_in)
    MergeFrom(*source);
  }
}

void get_token_in::MergeFrom(const get_token_in& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.get_token_in)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_token_in::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.get_token_in)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_token_in::CopyFrom(const get_token_in& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.get_token_in)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_token_in::IsInitialized() const {
  return true;
}

void get_token_in::InternalSwap(get_token_in* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_token_in::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void get_token_out::InitAsDefaultInstance() {
}
class get_token_out::_Internal {
 public:
};

get_token_out::get_token_out()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.get_token_out)
}
get_token_out::get_token_out(const get_token_out& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_token_ = from.id_token_;
  // @@protoc_insertion_point(copy_constructor:mud.get_token_out)
}

void get_token_out::SharedCtor() {
  id_token_ = PROTOBUF_LONGLONG(0);
}

get_token_out::~get_token_out() {
  // @@protoc_insertion_point(destructor:mud.get_token_out)
  SharedDtor();
}

void get_token_out::SharedDtor() {
}

void get_token_out::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_token_out& get_token_out::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_token_out_mud_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void get_token_out::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.get_token_out)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_token_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* get_token_out::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_token_out::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.get_token_out)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id_token = 1;
  if (this->id_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.get_token_out)
  return target;
}

size_t get_token_out::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.get_token_out)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id_token = 1;
  if (this->id_token() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_token_out::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.get_token_out)
  GOOGLE_DCHECK_NE(&from, this);
  const get_token_out* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_token_out>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.get_token_out)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.get_token_out)
    MergeFrom(*source);
  }
}

void get_token_out::MergeFrom(const get_token_out& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.get_token_out)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id_token() != 0) {
    _internal_set_id_token(from._internal_id_token());
  }
}

void get_token_out::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.get_token_out)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_token_out::CopyFrom(const get_token_out& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.get_token_out)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_token_out::IsInitialized() const {
  return true;
}

void get_token_out::InternalSwap(get_token_out* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_token_, other->id_token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_token_out::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void login_in::InitAsDefaultInstance() {
}
class login_in::_Internal {
 public:
};

login_in::login_in()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.login_in)
}
login_in::login_in(const login_in& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  password_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password_hash().empty()) {
    password_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_hash_);
  }
  id_token_ = from.id_token_;
  // @@protoc_insertion_point(copy_constructor:mud.login_in)
}

void login_in::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_login_in_mud_5fgrpc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_token_ = PROTOBUF_LONGLONG(0);
}

login_in::~login_in() {
  // @@protoc_insertion_point(destructor:mud.login_in)
  SharedDtor();
}

void login_in::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void login_in::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const login_in& login_in::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_login_in_mud_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void login_in::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.login_in)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_token_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* login_in::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mud.login_in.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mud.login_in.password_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* login_in::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.login_in)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mud.login_in.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password_hash = 2;
  if (this->password_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password_hash().data(), static_cast<int>(this->_internal_password_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mud.login_in.password_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password_hash(), target);
  }

  // int64 id_token = 3;
  if (this->id_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.login_in)
  return target;
}

size_t login_in::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.login_in)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password_hash = 2;
  if (this->password_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_hash());
  }

  // int64 id_token = 3;
  if (this->id_token() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_in::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.login_in)
  GOOGLE_DCHECK_NE(&from, this);
  const login_in* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<login_in>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.login_in)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.login_in)
    MergeFrom(*source);
  }
}

void login_in::MergeFrom(const login_in& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.login_in)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password_hash().size() > 0) {

    password_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_hash_);
  }
  if (from.id_token() != 0) {
    _internal_set_id_token(from._internal_id_token());
  }
}

void login_in::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.login_in)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_in::CopyFrom(const login_in& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.login_in)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_in::IsInitialized() const {
  return true;
}

void login_in::InternalSwap(login_in* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_hash_.Swap(&other->password_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_token_, other->id_token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_in::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void login_out::InitAsDefaultInstance() {
}
class login_out::_Internal {
 public:
};

void login_out::clear_characters() {
  characters_.Clear();
}
login_out::login_out()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.login_out)
}
login_out::login_out(const login_out& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      characters_(from.characters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_player_, &from.id_player_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_player_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:mud.login_out)
}

void login_out::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_login_out_mud_5fgrpc_2eproto.base);
  ::memset(&id_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_player_)) + sizeof(status_));
}

login_out::~login_out() {
  // @@protoc_insertion_point(destructor:mud.login_out)
  SharedDtor();
}

void login_out::SharedDtor() {
}

void login_out::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const login_out& login_out::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_login_out_mud_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void login_out::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.login_out)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characters_.Clear();
  ::memset(&id_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_player_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* login_out::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mud.login_out.status_enum status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::mud::login_out_status_enum>(val));
        } else goto handle_unusual;
        continue;
      // repeated .mud.character characters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 id_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* login_out::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.login_out)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mud.login_out.status_enum status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // repeated .mud.character characters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_characters(i), target, stream);
  }

  // int64 id_player = 3;
  if (this->id_player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.login_out)
  return target;
}

size_t login_out::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.login_out)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mud.character characters = 2;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 id_player = 3;
  if (this->id_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_player());
  }

  // .mud.login_out.status_enum status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_out::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.login_out)
  GOOGLE_DCHECK_NE(&from, this);
  const login_out* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<login_out>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.login_out)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.login_out)
    MergeFrom(*source);
  }
}

void login_out::MergeFrom(const login_out& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.login_out)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  characters_.MergeFrom(from.characters_);
  if (from.id_player() != 0) {
    _internal_set_id_player(from._internal_id_player());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void login_out::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.login_out)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_out::CopyFrom(const login_out& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.login_out)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_out::IsInitialized() const {
  return true;
}

void login_out::InternalSwap(login_out* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  characters_.InternalSwap(&other->characters_);
  swap(id_player_, other->id_player_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_out::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void select_character_in::InitAsDefaultInstance() {
}
class select_character_in::_Internal {
 public:
};

select_character_in::select_character_in()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.select_character_in)
}
select_character_in::select_character_in(const select_character_in& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_character_, &from.id_character_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_token_) -
    reinterpret_cast<char*>(&id_character_)) + sizeof(id_token_));
  // @@protoc_insertion_point(copy_constructor:mud.select_character_in)
}

void select_character_in::SharedCtor() {
  ::memset(&id_character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_token_) -
      reinterpret_cast<char*>(&id_character_)) + sizeof(id_token_));
}

select_character_in::~select_character_in() {
  // @@protoc_insertion_point(destructor:mud.select_character_in)
  SharedDtor();
}

void select_character_in::SharedDtor() {
}

void select_character_in::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const select_character_in& select_character_in::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_select_character_in_mud_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void select_character_in::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.select_character_in)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_token_) -
      reinterpret_cast<char*>(&id_character_)) + sizeof(id_token_));
  _internal_metadata_.Clear();
}

const char* select_character_in::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id_character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* select_character_in::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.select_character_in)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id_character = 1;
  if (this->id_character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id_character(), target);
  }

  // int64 id_token = 2;
  if (this->id_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.select_character_in)
  return target;
}

size_t select_character_in::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.select_character_in)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id_character = 1;
  if (this->id_character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_character());
  }

  // int64 id_token = 2;
  if (this->id_token() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void select_character_in::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.select_character_in)
  GOOGLE_DCHECK_NE(&from, this);
  const select_character_in* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<select_character_in>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.select_character_in)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.select_character_in)
    MergeFrom(*source);
  }
}

void select_character_in::MergeFrom(const select_character_in& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.select_character_in)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id_character() != 0) {
    _internal_set_id_character(from._internal_id_character());
  }
  if (from.id_token() != 0) {
    _internal_set_id_token(from._internal_id_token());
  }
}

void select_character_in::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.select_character_in)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_character_in::CopyFrom(const select_character_in& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.select_character_in)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_character_in::IsInitialized() const {
  return true;
}

void select_character_in::InternalSwap(select_character_in* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_character_, other->id_character_);
  swap(id_token_, other->id_token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata select_character_in::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void select_character_out::InitAsDefaultInstance() {
}
class select_character_out::_Internal {
 public:
};

select_character_out::select_character_out()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.select_character_out)
}
select_character_out::select_character_out(const select_character_out& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:mud.select_character_out)
}

void select_character_out::SharedCtor() {
  status_ = 0;
}

select_character_out::~select_character_out() {
  // @@protoc_insertion_point(destructor:mud.select_character_out)
  SharedDtor();
}

void select_character_out::SharedDtor() {
}

void select_character_out::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const select_character_out& select_character_out::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_select_character_out_mud_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void select_character_out::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.select_character_out)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* select_character_out::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mud.select_character_out.status_enum status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::mud::select_character_out_status_enum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* select_character_out::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.select_character_out)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mud.select_character_out.status_enum status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.select_character_out)
  return target;
}

size_t select_character_out::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.select_character_out)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mud.select_character_out.status_enum status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void select_character_out::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.select_character_out)
  GOOGLE_DCHECK_NE(&from, this);
  const select_character_out* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<select_character_out>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.select_character_out)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.select_character_out)
    MergeFrom(*source);
  }
}

void select_character_out::MergeFrom(const select_character_out& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.select_character_out)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void select_character_out::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.select_character_out)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_character_out::CopyFrom(const select_character_out& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.select_character_out)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_character_out::IsInitialized() const {
  return true;
}

void select_character_out::InternalSwap(select_character_out* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata select_character_out::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void create_character_in::InitAsDefaultInstance() {
}
class create_character_in::_Internal {
 public:
};

create_character_in::create_character_in()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.create_character_in)
}
create_character_in::create_character_in(const create_character_in& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  id_token_ = from.id_token_;
  // @@protoc_insertion_point(copy_constructor:mud.create_character_in)
}

void create_character_in::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_create_character_in_mud_5fgrpc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_token_ = PROTOBUF_LONGLONG(0);
}

create_character_in::~create_character_in() {
  // @@protoc_insertion_point(destructor:mud.create_character_in)
  SharedDtor();
}

void create_character_in::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void create_character_in::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const create_character_in& create_character_in::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_create_character_in_mud_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void create_character_in::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.create_character_in)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_token_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* create_character_in::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mud.create_character_in.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mud.create_character_in.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* create_character_in::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.create_character_in)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mud.create_character_in.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mud.create_character_in.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // int64 id_token = 3;
  if (this->id_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.create_character_in)
  return target;
}

size_t create_character_in::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.create_character_in)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // int64 id_token = 3;
  if (this->id_token() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void create_character_in::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.create_character_in)
  GOOGLE_DCHECK_NE(&from, this);
  const create_character_in* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<create_character_in>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.create_character_in)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.create_character_in)
    MergeFrom(*source);
  }
}

void create_character_in::MergeFrom(const create_character_in& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.create_character_in)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.id_token() != 0) {
    _internal_set_id_token(from._internal_id_token());
  }
}

void create_character_in::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.create_character_in)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_character_in::CopyFrom(const create_character_in& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.create_character_in)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_character_in::IsInitialized() const {
  return true;
}

void create_character_in::InternalSwap(create_character_in* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_token_, other->id_token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata create_character_in::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void create_character_out::InitAsDefaultInstance() {
}
class create_character_out::_Internal {
 public:
};

void create_character_out::clear_characters() {
  characters_.Clear();
}
create_character_out::create_character_out()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.create_character_out)
}
create_character_out::create_character_out(const create_character_out& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      characters_(from.characters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_character_, &from.id_character_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_character_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:mud.create_character_out)
}

void create_character_out::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_create_character_out_mud_5fgrpc_2eproto.base);
  ::memset(&id_character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_character_)) + sizeof(status_));
}

create_character_out::~create_character_out() {
  // @@protoc_insertion_point(destructor:mud.create_character_out)
  SharedDtor();
}

void create_character_out::SharedDtor() {
}

void create_character_out::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const create_character_out& create_character_out::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_create_character_out_mud_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void create_character_out::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.create_character_out)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characters_.Clear();
  ::memset(&id_character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_character_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* create_character_out::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mud.create_character_out.status_enum status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::mud::create_character_out_status_enum>(val));
        } else goto handle_unusual;
        continue;
      // int64 id_character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mud.character characters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* create_character_out::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.create_character_out)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mud.create_character_out.status_enum status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // int64 id_character = 2;
  if (this->id_character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id_character(), target);
  }

  // repeated .mud.character characters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_characters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.create_character_out)
  return target;
}

size_t create_character_out::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.create_character_out)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mud.character characters = 3;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 id_character = 2;
  if (this->id_character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_character());
  }

  // .mud.create_character_out.status_enum status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void create_character_out::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.create_character_out)
  GOOGLE_DCHECK_NE(&from, this);
  const create_character_out* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<create_character_out>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.create_character_out)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.create_character_out)
    MergeFrom(*source);
  }
}

void create_character_out::MergeFrom(const create_character_out& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.create_character_out)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  characters_.MergeFrom(from.characters_);
  if (from.id_character() != 0) {
    _internal_set_id_character(from._internal_id_character());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void create_character_out::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.create_character_out)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_character_out::CopyFrom(const create_character_out& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.create_character_out)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_character_out::IsInitialized() const {
  return true;
}

void create_character_out::InternalSwap(create_character_out* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  characters_.InternalSwap(&other->characters_);
  swap(id_character_, other->id_character_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata create_character_out::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void play_in::InitAsDefaultInstance() {
}
class play_in::_Internal {
 public:
};

play_in::play_in()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.play_in)
}
play_in::play_in(const play_in& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_token_, &from.id_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&id_token_)) + sizeof(command_));
  // @@protoc_insertion_point(copy_constructor:mud.play_in)
}

void play_in::SharedCtor() {
  ::memset(&id_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&id_token_)) + sizeof(command_));
}

play_in::~play_in() {
  // @@protoc_insertion_point(destructor:mud.play_in)
  SharedDtor();
}

void play_in::SharedDtor() {
}

void play_in::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const play_in& play_in::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_play_in_mud_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void play_in::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.play_in)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&id_token_)) + sizeof(command_));
  _internal_metadata_.Clear();
}

const char* play_in::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id_player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id_character = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mud.play_in.command_enum command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::mud::play_in_command_enum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* play_in::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.play_in)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id_token = 1;
  if (this->id_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id_token(), target);
  }

  // int64 id_player = 2;
  if (this->id_player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id_player(), target);
  }

  // int64 id_character = 3;
  if (this->id_character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id_character(), target);
  }

  // .mud.play_in.command_enum command = 4;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.play_in)
  return target;
}

size_t play_in::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.play_in)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id_token = 1;
  if (this->id_token() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_token());
  }

  // int64 id_player = 2;
  if (this->id_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_player());
  }

  // int64 id_character = 3;
  if (this->id_character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_character());
  }

  // .mud.play_in.command_enum command = 4;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void play_in::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.play_in)
  GOOGLE_DCHECK_NE(&from, this);
  const play_in* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<play_in>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.play_in)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.play_in)
    MergeFrom(*source);
  }
}

void play_in::MergeFrom(const play_in& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.play_in)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id_token() != 0) {
    _internal_set_id_token(from._internal_id_token());
  }
  if (from.id_player() != 0) {
    _internal_set_id_player(from._internal_id_player());
  }
  if (from.id_character() != 0) {
    _internal_set_id_character(from._internal_id_character());
  }
  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
}

void play_in::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.play_in)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void play_in::CopyFrom(const play_in& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.play_in)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool play_in::IsInitialized() const {
  return true;
}

void play_in::InternalSwap(play_in* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_token_, other->id_token_);
  swap(id_player_, other->id_player_);
  swap(id_character_, other->id_character_);
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata play_in::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void play_out::InitAsDefaultInstance() {
}
class play_out::_Internal {
 public:
};

void play_out::clear_tiles() {
  tiles_.Clear();
}
void play_out::clear_characters() {
  characters_.Clear();
}
void play_out::clear_enemies() {
  enemies_.Clear();
}
void play_out::clear_items() {
  items_.Clear();
}
play_out::play_out()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.play_out)
}
play_out::play_out(const play_out& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tiles_(from.tiles_),
      characters_(from.characters_),
      enemies_(from.enemies_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_character_, &from.id_character_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_character_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:mud.play_out)
}

void play_out::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_play_out_mud_5fgrpc_2eproto.base);
  ::memset(&id_character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_character_)) + sizeof(status_));
}

play_out::~play_out() {
  // @@protoc_insertion_point(destructor:mud.play_out)
  SharedDtor();
}

void play_out::SharedDtor() {
}

void play_out::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const play_out& play_out::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_play_out_mud_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void play_out::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.play_out)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  characters_.Clear();
  enemies_.Clear();
  items_.Clear();
  ::memset(&id_character_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_character_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* play_out::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id_character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mud.play_out.status_enum status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::mud::play_out_status_enum>(val));
        } else goto handle_unusual;
        continue;
      // repeated .mud.tile tiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mud.character characters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mud.enemy enemies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enemies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mud.item items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* play_out::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.play_out)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id_character = 1;
  if (this->id_character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id_character(), target);
  }

  // .mud.play_out.status_enum status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // repeated .mud.tile tiles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tiles(i), target, stream);
  }

  // repeated .mud.character characters = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_characters(i), target, stream);
  }

  // repeated .mud.enemy enemies = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enemies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_enemies(i), target, stream);
  }

  // repeated .mud.item items = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.play_out)
  return target;
}

size_t play_out::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.play_out)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mud.tile tiles = 3;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mud.character characters = 4;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mud.enemy enemies = 5;
  total_size += 1UL * this->_internal_enemies_size();
  for (const auto& msg : this->enemies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mud.item items = 6;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 id_character = 1;
  if (this->id_character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_character());
  }

  // .mud.play_out.status_enum status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void play_out::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.play_out)
  GOOGLE_DCHECK_NE(&from, this);
  const play_out* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<play_out>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.play_out)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.play_out)
    MergeFrom(*source);
  }
}

void play_out::MergeFrom(const play_out& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.play_out)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  characters_.MergeFrom(from.characters_);
  enemies_.MergeFrom(from.enemies_);
  items_.MergeFrom(from.items_);
  if (from.id_character() != 0) {
    _internal_set_id_character(from._internal_id_character());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void play_out::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.play_out)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void play_out::CopyFrom(const play_out& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.play_out)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool play_out::IsInitialized() const {
  return true;
}

void play_out::InternalSwap(play_out* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tiles_.InternalSwap(&other->tiles_);
  characters_.InternalSwap(&other->characters_);
  enemies_.InternalSwap(&other->enemies_);
  items_.InternalSwap(&other->items_);
  swap(id_character_, other->id_character_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata play_out::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mud
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mud::get_token_in* Arena::CreateMaybeMessage< ::mud::get_token_in >(Arena* arena) {
  return Arena::CreateInternal< ::mud::get_token_in >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::get_token_out* Arena::CreateMaybeMessage< ::mud::get_token_out >(Arena* arena) {
  return Arena::CreateInternal< ::mud::get_token_out >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::login_in* Arena::CreateMaybeMessage< ::mud::login_in >(Arena* arena) {
  return Arena::CreateInternal< ::mud::login_in >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::login_out* Arena::CreateMaybeMessage< ::mud::login_out >(Arena* arena) {
  return Arena::CreateInternal< ::mud::login_out >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::select_character_in* Arena::CreateMaybeMessage< ::mud::select_character_in >(Arena* arena) {
  return Arena::CreateInternal< ::mud::select_character_in >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::select_character_out* Arena::CreateMaybeMessage< ::mud::select_character_out >(Arena* arena) {
  return Arena::CreateInternal< ::mud::select_character_out >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::create_character_in* Arena::CreateMaybeMessage< ::mud::create_character_in >(Arena* arena) {
  return Arena::CreateInternal< ::mud::create_character_in >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::create_character_out* Arena::CreateMaybeMessage< ::mud::create_character_out >(Arena* arena) {
  return Arena::CreateInternal< ::mud::create_character_out >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::play_in* Arena::CreateMaybeMessage< ::mud::play_in >(Arena* arena) {
  return Arena::CreateInternal< ::mud::play_in >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::play_out* Arena::CreateMaybeMessage< ::mud::play_out >(Arena* arena) {
  return Arena::CreateInternal< ::mud::play_out >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
