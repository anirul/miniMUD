// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mud_lib.proto
#ifndef GRPC_mud_5flib_2eproto__INCLUDED
#define GRPC_mud_5flib_2eproto__INCLUDED

#include "mud_lib.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace mud {

// gRPC description.
class game_server final {
 public:
  static constexpr char const* service_full_name() {
    return "mud.game_server";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetToken(::grpc::ClientContext* context, const ::mud::token_in& request, ::mud::token_out* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::token_out>> AsyncGetToken(::grpc::ClientContext* context, const ::mud::token_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::token_out>>(AsyncGetTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::token_out>> PrepareAsyncGetToken(::grpc::ClientContext* context, const ::mud::token_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::token_out>>(PrepareAsyncGetTokenRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::mud::login_in& request, ::mud::login_out* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::login_out>> AsyncLogin(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::login_out>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::login_out>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mud::login_out>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetToken(::grpc::ClientContext* context, const ::mud::token_in* request, ::mud::token_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::token_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetToken(::grpc::ClientContext* context, const ::mud::token_in* request, ::mud::token_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::token_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::mud::login_in* request, ::mud::login_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::login_out* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::mud::login_in* request, ::mud::login_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::login_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::token_out>* AsyncGetTokenRaw(::grpc::ClientContext* context, const ::mud::token_in& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::token_out>* PrepareAsyncGetTokenRaw(::grpc::ClientContext* context, const ::mud::token_in& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::login_out>* AsyncLoginRaw(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mud::login_out>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetToken(::grpc::ClientContext* context, const ::mud::token_in& request, ::mud::token_out* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::token_out>> AsyncGetToken(::grpc::ClientContext* context, const ::mud::token_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::token_out>>(AsyncGetTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::token_out>> PrepareAsyncGetToken(::grpc::ClientContext* context, const ::mud::token_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::token_out>>(PrepareAsyncGetTokenRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::mud::login_in& request, ::mud::login_out* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::login_out>> AsyncLogin(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::login_out>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::login_out>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mud::login_out>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetToken(::grpc::ClientContext* context, const ::mud::token_in* request, ::mud::token_out* response, std::function<void(::grpc::Status)>) override;
      void GetToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::token_out* response, std::function<void(::grpc::Status)>) override;
      void GetToken(::grpc::ClientContext* context, const ::mud::token_in* request, ::mud::token_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::token_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::mud::login_in* request, ::mud::login_out* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::login_out* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::mud::login_in* request, ::mud::login_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mud::login_out* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mud::token_out>* AsyncGetTokenRaw(::grpc::ClientContext* context, const ::mud::token_in& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mud::token_out>* PrepareAsyncGetTokenRaw(::grpc::ClientContext* context, const ::mud::token_in& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mud::login_out>* AsyncLoginRaw(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mud::login_out>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::mud::login_in& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetToken_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetToken(::grpc::ServerContext* context, const ::mud::token_in* request, ::mud::token_out* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::mud::login_in* request, ::mud::login_out* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetToken() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::mud::token_in* /*request*/, ::mud::token_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetToken(::grpc::ServerContext* context, ::mud::token_in* request, ::grpc::ServerAsyncResponseWriter< ::mud::token_out>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::mud::login_in* request, ::grpc::ServerAsyncResponseWriter< ::mud::login_out>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetToken<WithAsyncMethod_Login<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetToken() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mud::token_in, ::mud::token_out>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::mud::token_in* request, ::mud::token_out* response) { return this->GetToken(context, request, response); }));}
    void SetMessageAllocatorFor_GetToken(
        ::grpc::experimental::MessageAllocator< ::mud::token_in, ::mud::token_out>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mud::token_in, ::mud::token_out>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::mud::token_in* /*request*/, ::mud::token_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetToken(::grpc::experimental::CallbackServerContext* /*context*/, const ::mud::token_in* /*request*/, ::mud::token_out* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Login() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mud::login_in, ::mud::login_out>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::mud::login_in* request, ::mud::login_out* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::experimental::MessageAllocator< ::mud::login_in, ::mud::login_out>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mud::login_in, ::mud::login_out>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* Login(::grpc::experimental::CallbackServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) { return nullptr; }
  };
  typedef ExperimentalWithCallbackMethod_GetToken<ExperimentalWithCallbackMethod_Login<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetToken() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::mud::token_in* /*request*/, ::mud::token_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetToken() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::mud::token_in* /*request*/, ::mud::token_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetToken() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetToken(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::mud::token_in* /*request*/, ::mud::token_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetToken(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Login() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* Login(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetToken() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mud::token_in, ::mud::token_out>(std::bind(&WithStreamedUnaryMethod_GetToken<BaseClass>::StreamedGetToken, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::mud::token_in* /*request*/, ::mud::token_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mud::token_in,::mud::token_out>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mud::login_in, ::mud::login_out>(std::bind(&WithStreamedUnaryMethod_Login<BaseClass>::StreamedLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::mud::login_in* /*request*/, ::mud::login_out* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mud::login_in,::mud::login_out>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetToken<WithStreamedUnaryMethod_Login<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetToken<WithStreamedUnaryMethod_Login<Service > > StreamedService;
};

}  // namespace mud


#endif  // GRPC_mud_5flib_2eproto__INCLUDED
